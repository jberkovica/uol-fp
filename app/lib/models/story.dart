import 'package:supabase_flutter/supabase_flutter.dart';
import '../config/supabase_config.dart';

/// Story model representing a story generated by Mira
class Story {
  final String id;
  final String title;
  final String content;
  final String? imageUrl;
  final String? audioUrl;
  final String? backgroundMusicUrl;
  final String? caption; // Image caption generated by AI
  final DateTime createdAt;
  final String childName;
  final StoryStatus status;
  final bool isFavourite;

  Story({
    required this.id,
    required this.title,
    required this.content,
    this.imageUrl,
    this.audioUrl,
    this.backgroundMusicUrl,
    this.caption,
    required this.createdAt,
    required this.childName,
    this.status = StoryStatus.pending,
    this.isFavourite = false,
  });

  /// Create Story from JSON response
  factory Story.fromJson(Map<String, dynamic> json) {
    return Story(
      id: _safeString(json['id'] ?? json['story_id']) ?? '',
      title: _safeString(json['title']) ?? 'Untitled Story',
      content: _safeString(json['content']) ?? '',
      imageUrl: _safeString(json['image_url']),
      audioUrl: _buildAudioUrl(json),
      backgroundMusicUrl: _buildBackgroundMusicUrl(json),
      caption: _safeString(json['caption']),
      createdAt: _safeDateTime(json['created_at']) ?? DateTime.now(),
      childName: _safeString(json['child_name']) ?? '',
      status: _parseStatus(_safeString(json['status'])),
      isFavourite: _safeBool(json['is_favourite']) ?? false,
    );
  }

  /// Convert Story to JSON
  Map<String, dynamic> toJson() {
    return {
      'story_id': id,
      'title': title,
      'content': content,
      'image_url': imageUrl,
      'audio_url': audioUrl,
      'background_music_url': backgroundMusicUrl,
      'caption': caption,
      'created_at': createdAt.toIso8601String(),
      'child_name': childName,
      'status': status.toString().split('.').last,
      'is_favourite': isFavourite,
    };
  }

  static StoryStatus _parseStatus(String? status) {
    switch (status) {
      case 'completed':
      case 'approved':
        return StoryStatus.approved;
      case 'rejected':
        return StoryStatus.rejected;
      case 'processing':
      case 'pending':
      default:
        return StoryStatus.pending;
    }
  }

  /// Safely convert any value to string, handling type mismatches
  static String? _safeString(dynamic value) {
    if (value == null) return null;
    if (value is String) return value;
    return value.toString();
  }

  /// Safely convert any value to DateTime, handling parsing errors
  static DateTime? _safeDateTime(dynamic value) {
    if (value == null) return null;
    if (value is DateTime) return value;
    if (value is String) {
      return DateTime.tryParse(value);
    }
    // For other types, try converting to string first
    return DateTime.tryParse(value.toString());
  }

  /// Safely convert any value to bool, handling type mismatches
  static bool? _safeBool(dynamic value) {
    if (value == null) return null;
    if (value is bool) return value;
    if (value is String) {
      switch (value.toLowerCase()) {
        case 'true':
        case '1':
        case 'yes':
          return true;
        case 'false':
        case '0':
        case 'no':
          return false;
        default:
          return null;
      }
    }
    if (value is int) {
      return value != 0;
    }
    return null;
  }

  /// Build audio URL from JSON data, handling both audio_url and audio_filename
  static String? _buildAudioUrl(Map<String, dynamic> json) {
    // First try audio_url (from API)
    String? audioUrl = _safeString(json['audio_url']);
    if (audioUrl != null && audioUrl.isNotEmpty) {
      return audioUrl;
    }
    
    // Fallback to building URL from audio_filename (from real-time subscription)
    String? audioFilename = _safeString(json['audio_filename']);
    if (audioFilename != null && audioFilename.isNotEmpty) {
      return _buildSupabaseStorageUrl(audioFilename);
    }
    
    return null;
  }

  /// Build background music URL from JSON data, handling both URL and filename
  static String? _buildBackgroundMusicUrl(Map<String, dynamic> json) {
    // First try background_music_url (from API)
    String? musicUrl = _safeString(json['background_music_url']);
    if (musicUrl != null && musicUrl.isNotEmpty) {
      return musicUrl;
    }
    
    // Fallback to building URL from background_music_filename (from real-time subscription)
    String? musicFilename = _safeString(json['background_music_filename']);
    if (musicFilename != null && musicFilename.isNotEmpty) {
      return _buildSupabaseStorageUrl(musicFilename, bucket: 'background-music');
    }
    
    return null;
  }

  /// Build Supabase storage URL from filename
  static String _buildSupabaseStorageUrl(String filename, {String bucket = 'user-uploads'}) {
    try {
      return Supabase.instance.client.storage.from(bucket).getPublicUrl(filename);
    } catch (e) {
      // Fallback to manual URL construction if Supabase client not available
      return '${SupabaseConfig.url}/storage/v1/object/public/$bucket/$filename';
    }
  }

  Story copyWith({
    String? id,
    String? title,
    String? content,
    String? imageUrl,
    String? audioUrl,
    String? backgroundMusicUrl,
    String? caption,
    DateTime? createdAt,
    String? childName,
    StoryStatus? status,
    bool? isFavourite,
  }) {
    return Story(
      id: id ?? this.id,
      title: title ?? this.title,
      content: content ?? this.content,
      imageUrl: imageUrl ?? this.imageUrl,
      audioUrl: audioUrl ?? this.audioUrl,
      backgroundMusicUrl: backgroundMusicUrl ?? this.backgroundMusicUrl,
      caption: caption ?? this.caption,
      createdAt: createdAt ?? this.createdAt,
      childName: childName ?? this.childName,
      status: status ?? this.status,
      isFavourite: isFavourite ?? this.isFavourite,
    );
  }
}

/// Status of a story in the approval workflow
enum StoryStatus {
  pending,
  approved,
  rejected,
}

/// Format DateTime to a human-readable string
extension DateTimeFormatting on DateTime {
  String toReadableString() {
    final now = DateTime.now();
    final difference = now.difference(this);

    if (difference.inDays == 0) {
      return 'Today, ${hour.toString().padLeft(2, '0')}:${minute.toString().padLeft(2, '0')}';
    } else if (difference.inDays == 1) {
      return 'Yesterday, ${hour.toString().padLeft(2, '0')}:${minute.toString().padLeft(2, '0')}';
    } else if (difference.inDays < 7) {
      const weekdays = [
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday',
        'Sunday'
      ];
      return '${weekdays[weekday - 1]}, ${hour.toString().padLeft(2, '0')}:${minute.toString().padLeft(2, '0')}';
    } else {
      return '${day.toString().padLeft(2, '0')}-${month.toString().padLeft(2, '0')}-$year';
    }
  }
}
