/// Story model representing a story generated by Mira
class Story {
  final String id;
  final String title;
  final String content;
  final String? imageUrl;
  final String? audioUrl;
  final String? caption; // Image caption generated by AI
  final DateTime createdAt;
  final String childName;
  final StoryStatus status;

  Story({
    required this.id,
    required this.title,
    required this.content,
    this.imageUrl,
    this.audioUrl,
    this.caption,
    required this.createdAt,
    required this.childName,
    this.status = StoryStatus.pending,
  });

  /// Create Story from JSON response
  factory Story.fromJson(Map<String, dynamic> json) {
    return Story(
      id: json['story_id'] as String,
      title: json['title'] as String? ?? 'Untitled Story',
      content: json['content'] as String? ?? '',
      imageUrl: json['image_url'] as String?,
      audioUrl: json['audio_url'] as String?,
      caption: json['caption'] as String?,
      createdAt: DateTime.tryParse(json['created_at'] as String? ?? '') ?? DateTime.now(),
      childName: json['child_name'] as String? ?? '',
      status: _parseStatus(json['status'] as String?),
    );
  }

  /// Convert Story to JSON
  Map<String, dynamic> toJson() {
    return {
      'story_id': id,
      'title': title,
      'content': content,
      'image_url': imageUrl,
      'audio_url': audioUrl,
      'caption': caption,
      'created_at': createdAt.toIso8601String(),
      'child_name': childName,
      'status': status.toString().split('.').last,
    };
  }

  static StoryStatus _parseStatus(String? status) {
    switch (status) {
      case 'completed':
      case 'approved':
        return StoryStatus.approved;
      case 'rejected':
        return StoryStatus.rejected;
      case 'processing':
      case 'pending':
      default:
        return StoryStatus.pending;
    }
  }

  Story copyWith({
    String? id,
    String? title,
    String? content,
    String? imageUrl,
    String? audioUrl,
    String? caption,
    DateTime? createdAt,
    String? childName,
    StoryStatus? status,
  }) {
    return Story(
      id: id ?? this.id,
      title: title ?? this.title,
      content: content ?? this.content,
      imageUrl: imageUrl ?? this.imageUrl,
      audioUrl: audioUrl ?? this.audioUrl,
      caption: caption ?? this.caption,
      createdAt: createdAt ?? this.createdAt,
      childName: childName ?? this.childName,
      status: status ?? this.status,
    );
  }
}

/// Status of a story in the approval workflow
enum StoryStatus {
  pending,
  approved,
  rejected,
}

/// Format DateTime to a human-readable string
extension DateTimeFormatting on DateTime {
  String toReadableString() {
    final now = DateTime.now();
    final difference = now.difference(this);

    if (difference.inDays == 0) {
      return 'Today, ${hour.toString().padLeft(2, '0')}:${minute.toString().padLeft(2, '0')}';
    } else if (difference.inDays == 1) {
      return 'Yesterday, ${hour.toString().padLeft(2, '0')}:${minute.toString().padLeft(2, '0')}';
    } else if (difference.inDays < 7) {
      const weekdays = [
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday',
        'Sunday'
      ];
      return '${weekdays[weekday - 1]}, ${hour.toString().padLeft(2, '0')}:${minute.toString().padLeft(2, '0')}';
    } else {
      return '${day.toString().padLeft(2, '0')}-${month.toString().padLeft(2, '0')}-$year';
    }
  }
}
